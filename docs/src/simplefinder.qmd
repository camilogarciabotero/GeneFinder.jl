---
engine: knitr
cache: refresh
code-line-numbers: true
code-annotations: select
---
```{julia}
#| include: false
#| label: installation
using Pkg
Pkg.activate("../../")
```
# A simple algorithm

The first implemented function is `simplefinder` a very non-restrictive ORF finder function that will catch all ORFs in a dedicated structure. Note that this will catch random ORFs not necesarily genes since it has no ORFs size or overlapping condition contraints. Thus it might consider `aa"M*"` a posible encoding protein from the resulting ORFs.

```{julia}
#| label: init
using BioSequences, GeneFinder

# > 180195.SAMN03785337.LFLS01000089 -> finds only 1 gene in Prodigal (from Pyrodigal tests)
seq = dna"AACCAGGGCAATATCAGTACCGCGGGCAATGCAACCCTGACTGCCGGCGGTAACCTGAACAGCACTGGCAATCTGACTGTGGGCGGTGTTACCAACGGCACTGCTACTACTGGCAACATCGCACTGACCGGTAACAATGCGCTGAGCGGTCCGGTCAATCTGAATGCGTCGAATGGCACGGTGACCTTGAACACGACCGGCAATACCACGCTCGGTAACGTGACGGCACAAGGCAATGTGACGACCAATGTGTCCAACGGCAGTCTGACGGTTACCGGCAATACGACAGGTGCCAACACCAACCTCAGTGCCAGCGGCAACCTGACCGTGGGTAACCAGGGCAATATCAGTACCGCAGGCAATGCAACCCTGACGGCCGGCGACAACCTGACGAGCACTGGCAATCTGACTGTGGGCGGCGTCACCAACGGCACGGCCACCACCGGCAACATCGCGCTGACCGGTAACAATGCACTGGCTGGTCCTGTCAATCTGAACGCGCCGAACGGCACCGTGACCCTGAACACAACCGGCAATACCACGCTGGGTAATGTCACCGCACAAGGCAATGTGACGACTAATGTGTCCAACGGCAGCCTGACAGTCGCTGGCAATACCACAGGTGCCAACACCAACCTGAGTGCCAGCGGCAATCTGACCGTGGGCAACCAGGGCAATATCAGTACCGCGGGCAATGCAACCCTGACTGCCGGCGGTAACCTGAGC"
```

## Finding all ORFs
```{julia}
#| eval: true
simplefind(seq)
```

Two other functions (`cdsgenerator` and `proteingenerator`) pass the sequence to `simplefinder` take the ORFs and act as generators of the sequence, so this way the can be `collect`ed in the REPL as an standard output or `write`en into a file more conviniently using the `FASTX` IO system:

## Generting cds and proteins with its ORF

```{julia}
cds = simplecds_generator(seq)
[i.sequence for i in cds]
```


```{julia}
protein = simpleprot_generator(seq)
[i.sequence for i in protein]
```

## Combining `FASTX` to read a fasta record

```{julia}
#| eval: false
using FASTX

filename = "../../test/data/KK037166.fna"
rdr = FASTA.Reader(open(filename))
record = first(rdr)
seq = sequence(record)
dnaseq = LongDNA{4}(seq)
[i.sequence for i in simpleprot_generator(dnaseq)]
```


## Writting cds and proteins fastas

```julia
write_cds("cds.fasta", seq)
```

```bash
cat cds.fasta

>locus=29:40 strand=+
ATGCAACCCTGA
>locus=137:145 strand=+
ATGCGCTGA
>locus=164:184 strand=+
ATGCGTCGAATGGCACGGTGA
>locus=173:184 strand=+
ATGGCACGGTGA
>locus=236:241 strand=+
ATGTGA
>locus=248:268 strand=+
ATGTGTCCAACGGCAGTCTGA
>locus=362:373 strand=+
ATGCAACCCTGA
>locus=470:496 strand=+
ATGCACTGGCTGGTCCTGTCAATCTGA
>locus=551:574 strand=+
ATGTCACCGCACAAGGCAATGTGA
>locus=569:574 strand=+
ATGTGA
>locus=581:601 strand=+
ATGTGTCCAACGGCAGCCTGA
>locus=695:706 strand=+
ATGCAACCCTGA
```

```julia
write_proteins("proteins.fasta", seq)
```

```bash
cat proteins.fasta

>locus=29:40 strand=+
MQP*
>locus=137:145 strand=+
MR*
>locus=164:184 strand=+
MRRMAR*
>locus=173:184 strand=+
MAR*
>locus=236:241 strand=+
M*
>locus=248:268 strand=+
MCPTAV*
>locus=362:373 strand=+
MQP*
>locus=470:496 strand=+
MHWLVLSI*
>locus=551:574 strand=+
MSPHKAM*
>locus=569:574 strand=+
M*
>locus=581:601 strand=+
MCPTAA*
>locus=695:706 strand=+
MQP*
```