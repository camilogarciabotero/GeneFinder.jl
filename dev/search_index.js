var documenterSearchIndex = {"docs":
[{"location":"_index/","page":"-","title":"-","text":"<p align=\"center\"> <img src=\"../assets/logo.svg\" height=\"150\"><br/> <i>A Gene Finder framework for Julia.</i><br/><br/> <a href=\"https://www.repostatus.org/#wip\"> <img src=\"https://www.repostatus.org/badges/latest/wip.svg\"> </a> <a href=\"https://codecov.io/gh/camilogarciabotero/GeneFinder.jl\"> <img src=\"https://img.shields.io/codecov/c/github/camilogarciabotero/GeneFinder.jl?logo=codecov&logoColor=white\"> </a> <a href=\"https://camilogarciabotero.github.io/GeneFinder.jl/dev/\"> <img src=\"https://img.shields.io/badge/documentation-online-blue.svg?logo=Julia&logoColor=white\"> </a> <a href=\"https://travis-ci.com/camilogarciabotero/GeneFinder.jl\"> <img src=\"https://travis-ci.com/camilogarciabotero/GeneFinder.jl.svg?branch=main\"> <a href=\"https://github.com/camilogarciabotero/GeneFinder.jl/blob/main/LICENSE\"> <img src=\"https://img.shields.io/badge/license-MIT-green.svg\"> </a> </p>","category":"page"},{"location":"_index/","page":"-","title":"-","text":"","category":"page"},{"location":"_index/#Overview","page":"-","title":"Overview","text":"","category":"section"},{"location":"_index/","page":"-","title":"-","text":"This is a species-agnostic, algorithm extensible, sequence-anonymous (genome, metagenomes) gene finder library for the Julia Language.","category":"page"},{"location":"_index/","page":"-","title":"-","text":"The main goal is to create a versatile module that enables apply different implemented algorithm to DNA sequences. See, for instance, BioAlignment implementations of different sequence alignment algorithms (local, global, edit-distance).","category":"page"},{"location":"_index/#Installation","page":"-","title":"Installation","text":"","category":"section"},{"location":"_index/","page":"-","title":"-","text":"You can install GeneFinder from the julia REPL. Press ] to enter pkg mode, and enter the following:","category":"page"},{"location":"_index/","page":"-","title":"-","text":"add GeneFinder","category":"page"},{"location":"_index/","page":"-","title":"-","text":"If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.","category":"page"},{"location":"_index/#Algorithms","page":"-","title":"Algorithms","text":"","category":"section"},{"location":"_index/#Coding-genes-(CDS-ORFs)","page":"-","title":"Coding genes (CDS - ORFs)","text":"","category":"section"},{"location":"_index/","page":"-","title":"-","text":"☒ Simple   finder\n☐ EasyGene\n☐ GLIMMER\n☐ Prodigal - Pyrodigal\n☐ PHANOTATE\n☐ k-mer based gene finders (?)\n☐ Augustus (?)","category":"page"},{"location":"_index/#Non-coding-genes-(RNA)","page":"-","title":"Non-coding genes (RNA)","text":"","category":"section"},{"location":"_index/","page":"-","title":"-","text":"☐ Infernal\n☐ tRNAscan","category":"page"},{"location":"_index/#Other-features","page":"-","title":"Other features","text":"","category":"section"},{"location":"_index/","page":"-","title":"-","text":"☐ parallelism SIMD ?\n☐ memory management (?)\n☐ specialized types\n☒ Gene\n☒ ORF\n☒ CDS\n☐ EukaryoticGene (?)\n☐ ProkaryoticGene (?)\n☐ Codon\n☐ Intron\n☐ Exon\n☐ GFF –\\> See other packages\n☐ FASTX –\\> See I/O in other packages","category":"page"},{"location":"_index/#Compatibilities","page":"-","title":"Compatibilities","text":"","category":"section"},{"location":"_index/","page":"-","title":"-","text":"Must interact with or extend:","category":"page"},{"location":"_index/","page":"-","title":"-","text":"GenomicAnnotations.jl\nBioSequences.jl\nSequenceVariation.jl\nGenomicFeatures.jl\nFASTX.jl\nKmers.jl","category":"page"},{"location":"_index/#Contributing","page":"-","title":"Contributing","text":"","category":"section"},{"location":"_index/#Citing","page":"-","title":"Citing","text":"","category":"section"},{"location":"_index/","page":"-","title":"-","text":"See CITATION.bib for the relevant reference(s).","category":"page"},{"location":"_index/","page":"-","title":"-","text":"Logo: gene analysis by Vector Points from the Noun Project","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = GeneFinder\nDocTestSetup = quote\n    using GeneFinder\nend","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [GeneFinder]","category":"page"},{"location":"api/#GeneFinder.CDS","page":"API","title":"GeneFinder.CDS","text":"struct CDS\n    orf::ORF\n    sequence::LongSubSeq{DNAAlphabet{4}}\nend\n\nThe CDS struct represents a coding sequence in a DNA sequence. It has three fields:\n\norf: is the basic composible type (location::UnitRange{Int}, strand::Char) displaying the location of the ORF and the associate strand: forward ('+') or reverse ('-')\nsequence: a LongSequence{DNAAlphabet{4}} sequence representing the actual sequence of the CDS\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneFinder.GeneFeatures","page":"API","title":"GeneFinder.GeneFeatures","text":"struct GeneFeatures\n    seqname::String\n    start::Int64\n    stop::Int64\n    score::Float64\n    strand::Char\n    frame::'.'\n    attribute::\nend\n\nThis is the main Gene struct, based on the fields that could be found in a GFF3, still needs to be defined correctly,     The idea is correct the frame and attributes that will have something like a possible list (id=Char;name=;locus_tag).     The write and get functions should have a dedicated method for this struct.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneFinder.ORF","page":"API","title":"GeneFinder.ORF","text":"struct ORF\n    location::UnitRange{Int64}\n    strand::Char\nend\n\nThe ORF struct represents an open reading frame in a DNA sequence. It has two fields: \n\nlocation: which is a UnitRange{Int64} indicating the start and end locations of the ORF in the sequence\nstrand:  is a Char type indicating whether the ORF is on the forward ('+') or reverse ('-') strand of the sequence.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneFinder.Protein","page":"API","title":"GeneFinder.Protein","text":"struct Protein\n    sequence::LongSequence\n    orf::ORF\nend\n\nSimilarly to the CDS struct, the Protein struct represents a encoded protein sequence in a DNA sequence.      It has three fields:\n\norf: is the basic composible type (location::UnitRange{Int}, strand::Char) of the sequence\nsequence: a LongSequence sequence representing the actual translated sequence of the CDS\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneFinder.TCM","page":"API","title":"GeneFinder.TCM","text":"TCM(alphabet::Vector{DNA})\n\nA data structure for storing a DNA Transition Count Matrix (TCM). The TCM is a square matrix where each row and column corresponds to a nucleotide in the given alphabet. The value at position (i, j) in the matrix represents the number of times that nucleotide i is immediately followed by nucleotide j in a DNA sequence. \n\nFields:\n\norder::Dict{DNA, Int64}: A dictionary that maps each nucleotide in the alphabet to its corresponding index in the matrix.\ncounts::Matrix{Int64}: The actual matrix of counts.\n\nInternal function:\n\nTCM(alphabet::Vector{DNA}): Constructs a new TCM object with the given alphabet. This function initializes the order field by creating a dictionary that maps each nucleotide in the alphabet to its corresponding index in the matrix. It also initializes the counts field to a matrix of zeros with dimensions len x len, where len is the length of the alphabet.\n\nExample usage:\n\nalphabet = [DNA_A, DNA_C, DNA_G, DNA_T]\ndtcm = TCM(alphabet)\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneFinder.TPM","page":"API","title":"GeneFinder.TPM","text":"TPM(alphabet::Vector{DNA})\n\nA data structure for storing a DNA Transition Probability Matrix (TPM). The TPM is a square matrix where each row and column corresponds to a nucleotide in the given alphabet. The value at position (i, j) in the matrix represents the probability of transitioning from nucleotide i to nucleotide j in a DNA sequence. \n\nFields:\n\norder::Dict{DNA, Int64}: A dictionary that maps each nucleotide in the alphabet to its corresponding index in the matrix.\nprobabilities::Matrix{Float64}: The actual matrix of probabilities.\n\nExample usage:\n\nalphabet = [DNA_A, DNA_C, DNA_G, DNA_T]\ndtpm = TPM(alphabet)\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneFinder.TransitionModel","page":"API","title":"GeneFinder.TransitionModel","text":"struct TransitionModel\n\nThe TransitionModel struct represents a transition model used in a sequence analysis. It consists of a transition probability matrix (tpm) and initial distribution probabilities.\n\nFields\n\ntpm::Matrix{Float64}: The transition probability matrix, a matrix of type Float64 representing the probabilities of transitioning from one state to another.\ninitials::Matrix{Float64}: The initial distribution probabilities, a matrix of type Float64 representing the probabilities of starting in each state.\nn: is the order of the transition model, or in other words the order of the resulted Markov chain.\n\nConstructors\n\nTransitionModel(tpm::Matrix{Float64}, initials::Matrix{Float64}): Constructs a TransitionModel object with the provided transition probability matrix tpm and initial distribution probabilities initials.\nTransitionModel(sequence::LongSequence{DNAAlphabet{4}}): Constructs a TransitionModel object based on a given DNA sequence. The transition probability matrix is calculated using transition_probability_matrix(sequence).probabilities, and the initial distribution probabilities are calculated using initial_distribution(sequence).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneFinder.cdsgenerator-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API","title":"GeneFinder.cdsgenerator","text":"cdsgenerator(sequence::LongSequence{DNAAlphabet{4}}; kwargs...)\ncdsgenerator(sequence::String; kwargs...)\n\nA function to generete CDSs sequence out of a DNA sequence.\n\nThe cdsgenerator is a generator function that takes a LongSequence{DNAAlphabet{4}} sequence and returns an iterator over the given sequence,     containing the coding sequences (CDSs) found in the sequence and the ORF.      It uses the findorfs function to find open reading frames (ORFs) in the sequence,      and then it extracts the actual CDS sequence from each ORF, returining both.      The function also searches the reverse complement of the sequence, so it finds CDSs on both strands.\n\nKeywords\n\nalternative_start::Bool=false: If true will pass the extended start codons to search. This will increase 3x the exec. time.\nmin_len::Int64=6:  Length of the allowed ORF. Default value allow aa\"M*\" a posible encoding protein from the resulting ORFs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.dinucleotides-Tuple{Union{BioSequences.LongSubSeq{<:BioSequences.NucleicAcidAlphabet{4}}, BioSequences.LongNuc{4, <:BioSequences.NucleicAcidAlphabet{4}}}}","page":"API","title":"GeneFinder.dinucleotides","text":"dinucleotides(sequence::LongNucOrView{4})\n\nCompute the transition counts of each dinucleotide in a given DNA sequence.\n\nArguments\n\nsequence::LongSequence{DNAAlphabet{4}}: a LongSequence{DNAAlphabet{4}} object representing the DNA sequence.\n\nKeywords\n\nextended_alphabet::Bool=false: If true will pass the extended alphabet of DNA to search\n\nReturns\n\nA dictionary with keys being LongSequence{DNAAlphabet{4}} objects representing the dinucleotides, and values being the number of occurrences of each dinucleotide in the sequence.\n\nExample\n\nseq = dna\"AGCTAGCTAGCT\"\n\ndinucleotides(seq)\n\nDict{LongSequence{DNAAlphabet{4}}, Int64} with 16 entries:\n  GG => 0\n  TC => 0\n  GC => 3\n  CG => 0\n  CC => 0\n  AG => 3\n  TT => 0\n  AC => 0\n  TA => 2\n  GT => 0\n  GA => 0\n  CT => 3\n  CA => 0\n  AT => 0\n  AA => 0\n  TG => 0\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.fasta_to_dna-Tuple{String}","page":"API","title":"GeneFinder.fasta_to_dna","text":"fasta_to_dna(input::String)\n\nConverts a FASTA formatted file (even if it is a multi-fasta) to an array of LongSequence{DNAAlphabet{4}} objects.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.findorfs-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API","title":"GeneFinder.findorfs","text":"findorfs(sequence::LongSequence{DNAAlphabet{4}}; kwargs...)::Vector{ORF}\nfindorfs(sequence::String; kwargs...)::Vector{ORF}\n\nA simple implementation that finds ORFs in a DNA sequence.\n\nThe findorfs function takes a LongSequence{DNAAlphabet{4}} sequence and returns a Vector{ORF} containing the ORFs found in the sequence.      It searches entire regularly expressed CDS, adding each ORF it finds to the vector. The function also searches the reverse complement of the sequence, so it finds ORFs on both strands.         Extending the starting codons with the alternative_start = true will search for ATG, GTG, and TTG.     Some studies have shown that in E. coli (K-12 strain), ATG, GTG and TTG are used 83 %, 14 % and 3 % respectively.\n\nnote: Note\nThis function has not ORFs scoring scheme. Thus it might consider aa\"M*\" a posible encoding protein from the resulting ORFs.\n\nKeywords\n\nalternative_start::Bool=false: If true will pass the extended start codons to search. This will increase 3x the exec. time.\nmin_len::Int64=6:  Length of the allowed ORF. Default value allow aa\"M*\" a posible encoding protein from the resulting ORFs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.getcds-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API","title":"GeneFinder.getcds","text":"getcds(input::LongSequence{DNAAlphabet{4}}, output::String; kwargs...)\ngetcds(input::String, output::String; kwargs...) ## for strings per se\n\nThis function will take a LongSequence{DNAAlphabet{4}} or String sequence and by means of the findorfs() function will push LongSubSeq{DNAAlphabet{4}} into a Vector{}\n\nKeywords\n\nalternative_start::Bool=false: If true will pass the extended start codons to search. This will increase 3x the exec. time.\nmin_len::Int64=6:  Length of the allowed ORF. Default value allow aa\"M*\" a posible encoding protein from the resulting ORFs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.getproteins-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API","title":"GeneFinder.getproteins","text":"getproteins(input::LongSequence{DNAAlphabet{4}}, output::String; kwargs...)\ngetproteins(input::String, output::String; kwargs...)\n\nSimilar to getcds() function, it will take a LongSequence{DNAAlphabet{4}} or String sequence and by means of the findorfs() and the translate() function will push LongAAs into a Vector\n\nKeywords\n\nalternative_start::Bool=false: If true will pass the extended start codons to search. This will increase 3x the exec. time.\nmin_len::Int64=6:  Length of the allowed ORF. Default value allow aa\"M*\" a posible encoding protein from the resulting ORFs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.hasprematurestop-Tuple{Union{BioSequences.LongSubSeq{<:BioSequences.NucleicAcidAlphabet{4}}, BioSequences.LongNuc{4, <:BioSequences.NucleicAcidAlphabet{4}}}}","page":"API","title":"GeneFinder.hasprematurestop","text":"hasprematurestop(sequence::LongNucOrView{4})::Bool\n\nDetermine whether the sequence of type LongSequence{DNAAlphabet{4}} contains a premature stop codon.\n\nReturns a boolean indicating whether the sequence has more than one stop codon.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.iscoding","page":"API","title":"GeneFinder.iscoding","text":"iscoding(\n    sequence::LongSequence{DNAAlphabet{4}}, \n    codingmodel::TransitionModel, \n    noncodingmodel::TransitionModel,\n    η::Float64 = 1e-5\n    )\n\nCheck if a given DNA sequence is likely to be coding based on a log-odds ratio.     The log-odds ratio is a statistical measure used to assess the likelihood of a sequence being coding or non-coding. It compares the probability of the sequence generated by a coding model to the probability of the sequence generated by a non-coding model. If the log-odds ratio exceeds a given threshold (η), the sequence is considered likely to be coding.     It is formally described as a decision rule:\n\nS(X) = log left( fracP_C(X_1=i_1 ldots X_T=i_T)P_N(X_1=i_1 ldots X_T=i_T) right) begincases  eta  Rightarrow textcoding   eta  Rightarrow textnoncoding endcases\n\nArguments\n\nsequence::LongSequence{DNAAlphabet{4}}: The DNA sequence to be evaluated.\ncodingmodel::TransitionModel: The transition model for coding regions.\nnoncodingmodel::TransitionModel: The transition model for non-coding regions.\nη::Float64 = 1e-5: The threshold value for the log-odds ratio (default: 1e-5).\n\nReturns\n\ntrue if the sequence is likely to be coding.\nfalse if the sequence is likely to be non-coding.\n\nRaises\n\nErrorException: if the length of the sequence is not divisible by 3.\nErrorException: if the sequence contains a premature stop codon.\n\nExample\n\nsequence = LondDNA(\"ATGGCATCTAG\")\ncodingmodel = TransitionModel()\nnoncodingmodel = TransitionModel()\niscoding(sequence, codingmodel, noncodingmodel)  # Returns: true\n\n\n\n\n\n","category":"function"},{"location":"api/#GeneFinder.locationiterator-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API","title":"GeneFinder.locationiterator","text":"locationiterator(sequence::LongSequence{DNAAlphabet{4}}; alternative_start::Bool=false)\n\nThis is an iterator function that uses regular expressions to search the entire CDS (instead of start and stop codons) in a LongSequence{DNAAlphabet{4}} sequence.     It uses an anonymous function that will find the first regularly expressed CDS. Then using this anonymous function it creates an iterator that will apply it until there is no other CDS.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.nucleotidefreqs-Tuple{Union{BioSequences.LongSubSeq{<:BioSequences.NucleicAcidAlphabet{4}}, BioSequences.LongNuc{4, <:BioSequences.NucleicAcidAlphabet{4}}}}","page":"API","title":"GeneFinder.nucleotidefreqs","text":"nucleotidefreqs(sequence::LongSequence{DNAAlphabet{4}}) -> Dict{DNA, Float64}\n\nCalculate the frequency of each nucleotide in a DNA sequence.\n\nArguments\n\nsequence::LongSequence{DNAAlphabet{4}}: A LongSequence{DNAAlphabet{4}} sequence.\n\nReturns\n\nA dictionary with each nucleotide in the sequence as a key, and its frequency as a value.\n\nExample\n\nseq = dna\"CCTCCCGGACCCTGGGCTCGGGAC\"\n\nnucleotidefreqs(seq)\n\nDict{DNA, Float64} with 4 entries:\nDNA_T => 0.125\nDNA_A => 0.0833333\nDNA_G => 0.333333\nDNA_C => 0.458333\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.proteingenerator-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API","title":"GeneFinder.proteingenerator","text":"proteingenerator(sequence::LongSequence{DNAAlphabet{4}}; kwargs...)\nproteingenerator(sequence::String; kwargs...)\n\nAs its name suggest this generator function iterates over the sequence to find proteins directly from a DNA sequence.      The proteingenerator function takes a LongSequence{DNAAlphabet{4}} sequence and returns a Vector{CDS} containing the      coding sequences (CDSs) found in the sequence and the associated ORF.\n\nKeywords\n\ncode::GeneticCode=BioSequences.standard_genetic_code: The genetic code by which codons will be translated. See BioSequences.ncbi_trans_table for more info. \nalternative_start::Bool=false: If true will pass the extended start codons to search. This will increase 3x the exec. time.\nmin_len::Int64=6:  Length of the allowed ORF. Default value allow aa\"M*\" a posible encoding protein from the resulting ORFs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.sequenceprobability-Tuple{Union{BioSequences.LongSubSeq{<:BioSequences.NucleicAcidAlphabet{4}}, BioSequences.LongNuc{4, <:BioSequences.NucleicAcidAlphabet{4}}}, TransitionModel}","page":"API","title":"GeneFinder.sequenceprobability","text":"sequenceprobability(sequence::LongNucOrView{4}, tpm::Matrix{Float64}, initials=Vector{Float64})\n\nCompute the probability of a given sequence using a transition probability matrix and the initial probabilities distributions.\n\nP(X_1 = i_1 ldots X_T = i_T) = pi_i_1^T-1 prod_t=1^T-1 a_i_t i_t+1\n\nArguments\n\nsequence::LongNucOrView{4}: The input sequence of nucleotides.\ntm::TransitionModel is the actual data structure composed of a tpm::Matrix{Float64} the transition probability matrix and initials=Vector{Float64} the initial state probabilities.\n\nReturns\n\nprobability::Float64: The probability of the input sequence.\n\nExample\n\nmainseq = LongDNA{4}(\"CCTCCCGGACCCTGGGCTCGGGAC\")\n\ntpm = transition_probability_matrix(mainseq)\n    \n    4×4 Matrix{Float64}:\n    0.0   1.0    0.0    0.0\n    0.0   0.5    0.2    0.3\n    0.25  0.125  0.625  0.0\n    0.0   0.667  0.333  0.0\n\ninitials = initial_distribution(mainseq)\n\n    1×4 Matrix{Float64}:\n    0.0869565  0.434783  0.347826  0.130435\n    \ntm = transition_model(tpm, initials)\n    - Transition Probability Matrix (Size: 4 × 4):\n    0.0\t1.0\t0.0\t0.0\n    0.0\t0.5\t0.2\t0.3\n    0.25\t0.125\t0.625\t0.0\n    0.0\t0.667\t0.333\t0.0\n    - Initials (Size: 1 × 4):\n    0.087\t0.435\t0.348\t0.13\n    - order: 1\n\nnewseq = LondDNA(\"CCTG\")\n\n    4nt DNA Sequence:\n    CCTG\n\n\nsequenceprobability(newseq, tm)\n    \n    0.0217\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.transition_count_matrix-Tuple{Union{BioSequences.LongSubSeq{<:BioSequences.NucleicAcidAlphabet{4}}, BioSequences.LongNuc{4, <:BioSequences.NucleicAcidAlphabet{4}}}}","page":"API","title":"GeneFinder.transition_count_matrix","text":"transition_count_matrix(sequence::LongSequence{DNAAlphabet{4}})\n\nCompute the transition count matrix (TCM) of a given DNA sequence.\n\nArguments\n\nsequence::LongSequence{DNAAlphabet{4}}: a LongSequence{DNAAlphabet{4}} object representing the DNA sequence.\n\nKeywords\n\nextended_alphabet::Bool=false: If true will pass the extended alphabet of DNA to search\n\nReturns\n\nA TCM object representing the transition count matrix of the sequence.\n\nExample\n\nseq = LongDNA{4}(\"AGCTAGCTAGCT\")\n\ntcm = transition_count_matrix(seq)\n\nGeneFinder.TCM{Dict{DNA, Int64}, Matrix{Int64}:\n   A C G T\nA  0 0 3 0\nC  0 0 0 3\nG  0 3 0 0\nT  2 0 0 0\n\n\n\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.transition_model","page":"API","title":"GeneFinder.transition_model","text":"transition_model(sequence::LongNucOrView{4}, n::Int64=1)\n\nConstructs a transition model based on the given DNA sequence and transition order.\n\nArguments\n\nsequence::LongNucOrView{4}: A DNA sequence represented as a LongNucOrView{4} object.\nn::Int64 (optional): The transition order (default: 1).\n\nReturns\n\nA TransitionModel object representing the transition model.\n\n\n\ntransition_model(tpm::Matrix{Float64}, initials::Matrix{Float64}, n::Int64=1)\n\nBuilds a transtition model based on the transition probability matrix and the initial distributions. It can also calculates higer orders of the model if n is changed.\n\nArguments\n\ntpm::Matrix{Float64}: the transition probability matrix TPM\ninitials::Matrix{Float64}: the initial distributions of the model.\nn::Int64 (optional): The transition order (default: 1).\n\nReturns\n\nA TransitionProbabilityMatrix object representing the transition probability matrix.\n\nExample\n\nsequence = LongDNA{4}(\"ACTACATCTA\")\n\nmodel = transition_model(sequence, 2)\nTransitionModel:\n  - Transition Probability Matrix (Size: 4 × 4):\n    0.444\t0.111\t0.0\t0.444\n    0.444\t0.444\t0.0\t0.111\n    0.0\t0.0\t0.0\t0.0\n    0.111\t0.444\t0.0\t0.444\n  - Initials (Size: 1 × 4):\n    0.333\t0.333\t0.0\t0.333\n  - order: 2\n\n\n\n\n\n","category":"function"},{"location":"api/#GeneFinder.transition_probability_matrix","page":"API","title":"GeneFinder.transition_probability_matrix","text":"transition_probability_matrix(sequence::LongSequence{DNAAlphabet{4}})\n\nCompute the transition probability matrix (TPM) of a given DNA sequence. Formally it construct hatA where: \n\na_ij = P(X_t = j mid X_t-1 = i) = fracP(X_t-1 = i X_t = j)P(X_t-1 = i)\n\nArguments\n\nsequence::LongNucOrView{4}: a LongNucOrView{4} object representing the DNA sequence.\nn::Int64=1: The order of the Markov model. That is the hatA^n\n\nKeywords\n\nextended_alphabet::Bool=false: If true will pass the extended alphabet of DNA to search\n\nReturns\n\nA TPM object representing the transition probability matrix of the sequence.\n\nExample\n\nseq = dna\"AGCTAGCTAGCT\"\n\ntpm = transition_probability_matrix(seq)\n\nGeneFinder.tpm{Dict{DNA, Int64}, Matrix{Float64}:\n   A   C   G   T\nA  0.0 0.0 1.0 0.0\nC  0.0 0.0 0.0 1.0\nG  0.0 1.0 0.0 0.0\nT  1.0 0.0 0.0 0.0\n\n\n\n\n\n","category":"function"},{"location":"api/#GeneFinder.write_bed-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, String}","page":"API","title":"GeneFinder.write_bed","text":"write_bed(input::LongSequence{DNAAlphabet{4}}, output::String; kwargs...)\nwrite_bed(input::String, output::String; kwargs...)\n\nWrite BED data to a file.\n\nKeywords\n\nalternative_start::Bool=false: If true will pass the extended start codons to search. This will increase 3x the exec. time.\nmin_len::Int64=6:  Length of the allowed ORF. Default value allow aa\"M*\" a posible encoding protein from the resulting ORFs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.write_cds-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, String}","page":"API","title":"GeneFinder.write_cds","text":"write_cds(input::LongSequence{DNAAlphabet{4}}, output::String; kwargs...)\nwrite_cds(input::String, output::String; kwargs...)\n\nWrite a file containing the coding sequences (CDSs) of a given DNA sequence to the specified file.\n\nKeywords\n\nalternative_start: A boolean value indicating whether alternative start codons should be used when identifying CDSs. Default is false.\nmin_len: An integer representing the minimum length that a CDS must have in order to be included in the output file. Default is 6.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.write_gff-Tuple{String, String}","page":"API","title":"GeneFinder.write_gff","text":"write_gff(input::LongSequence{DNAAlphabet{4}}, output::String; kwargs...)\nwrite_gff(input::String, output::String; kwargs...)\n\nWrite GFF data to a file.\n\nKeywords\n\nalternative_start::Bool=false: If true will pass the extended start codons to search. This will increase 3x the exec. time.\nmin_len::Int64=6:  Length of the allowed ORF. Default value allow aa\"M*\" a posible encoding protein from the resulting ORFs.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneFinder.write_proteins-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, String}","page":"API","title":"GeneFinder.write_proteins","text":"write_proteins(input::LongSequence{DNAAlphabet{4}}, output::String; kwargs...)\n\nWrite the protein sequences encoded by the coding sequences (CDSs) of a given DNA sequence to the specified file.\n\nKeywords\n\ncode::GeneticCode=BioSequences.standard_genetic_code: The genetic code by which codons will be translated. See BioSequences.ncbi_trans_table for more info. \nalternative_start::Bool=false: If true will pass the extended start codons to search. This will increase 3x the exec. time.\nmin_len::Int64=6:  Length of the allowed ORF. Default value allow aa\"M*\" a posible encoding protein from the resulting ORFs.\n\n\n\n\n\n","category":"method"},{"location":"markovchains-variant/#DNA-as-a-Markov-chain","page":"A variant test","title":"DNA as a Markov chain","text":"","category":"section"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"Several packages (e.g. MarkovChainsHammer, Markovians, etc.) in the Julia ecosystem have been implemented to work with Markov chains with a state space of integers, those could be efficient in many ways, but they are clumsy to work with a specialized biological types as in the BioJulia ecosystem. Therefore, in the GeneFinder package we dedicated some implementations to work with BioSequence types so that we can expand the functionality in an efficient way (see complete API).","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"One important step towards many gene finding algorithms is to represent a DNA sequence as a Markov chain. In this representation a DNA sequence of a reduced alphabet 𝒜 = {A, C, G, T} is draw as a four-vertex graph, where each letter of 𝒜 is a state (vertex) and the edges of the graph represent transitions from one nucleotide to another in a sequence (e.g. A → T represent a single nucleotide to nucleotide transition). This is also considered more specifically as a Discrete Markov chain (Axelson-Fisk 2015). The complete set of transitions and states of a DNA sequence of alphabet 𝒜.","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"(Image: DNA sequence as a Markov chain)","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"More formally a Markov chain is a random process where each state is a random variable X<sub>t</sub> where t \\in T is a discrete time in a finite sequence T and the probability to jump from one state into another is only dependent of the current state. Therefore a definition of this Markov property is given by:","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"beginalign\nP(X_t = j X_t1 = i)\nendalign","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"where i, j ∈ 𝒜 . This property led us to generalize a way to calculate the probability of a sequence T from a process (X_{1}...X_{T}) where each random variable is a nucleotide from 𝒜 so that:","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"beginalign\nP(X_1 = i_1X_T = i_T) = P(X_1 = i_1) prod_t=2^T P(X_t = i_t  X_t1 = i_t1)\nendalign","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"Note that previous equations has two terms, a initial probability P(X_{1} = i_{1}) and the the product of all transitions beginning at t=2. So, to calculate the initial probability distribution of each of the nucleotides of a string T with the alphabet 𝒜 we can first calculate the transition probability matrix ℳ̂ out of the frequency count of the transitions. In an alphabet 𝒜 we got 4<sup>2</sup> transitions of one order, that is the A**A, A**C, A**G, ... which coincides with the frequency of the dinucleotides in the sequence. So we can later in fact build a 4x4 matrix representing all the transitions. For instance in a DNA sequence T of 24 nucleotides:  ","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"CCTCCCGGACCCTGGGCTCGGGAC","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"We can calculate each frequency nucleotide to any other nucleotide widehatm_ij = fracc_ijc_i where c<sub>i**j</sub> is the actual count of the dinucleotide, and therefore c<sub>i</sub> is the counts of the nucleotide i to any other nucleotide and build the transition probability matrix:","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"beginbmatrix\n    textA  textC  textG  textT \ntextA  000  100  000  000 \ntextC  000  056  022  030 \ntextG  025  012  062  000 \ntextT  000  067  033  000 \nendbmatrix","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"It is noteworthy that initial probabilities can also be obtained from the counts of each nucleotide transitions c<sub>i**j</sub> over the total sum of the dinucleotide counts c<sub>k</sub> :","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"widehatpi_i = fracc_isum_kc_k","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"That way for the previous example example we can can calculate the initial probabilities π̂ = (0.08,0.43,0.34,0.13). Both set of probabilities composed a transition model that can be used to predict the probability of any DNA sequence using equation (2).","category":"page"},{"location":"markovchains-variant/#Transition-models-with-BioSequences","page":"A variant test","title":"Transition models with BioSequences","text":"","category":"section"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"We can now calculate a transition probability matrix from a LongDNA sequence using the transition_probability_matrix and initial_distribution methods for a given LongDNA sequence:","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"using BioSequences, GeneFinder\n\nsequence = dna\"CCTCCCGGACCCTGGGCTCGGGAC\"\n\ntpm = transition_probability_matrix(sequence)\ninitials = initial_distribution(sequence)\n\nprintln(tpm)\nprintln(initials)","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"TPM{Dict{DNA, Int64}, Matrix{Float64}:\n   A     C     G     T     \nA  0.0   1.0   0.0   0.0   \nC  0.0   0.5   0.2   0.3   \nG  0.25  0.125 0.625 0.0   \nT  0.0   0.667 0.333 0.0   \n\n[0.08695652173913043 0.43478260869565216 0.34782608695652173 0.13043478260869565]","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"More conveniently, we can now use the transition_model method and obtain the transition probabilities and the initial distribution and build a transition model:","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"transition_model(sequence)","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"TransitionModel:\n  - Transition Probability Matrix (Size: 4 × 4):\n    0.0 1.0 0.0 0.0 \n    0.0 0.5 0.2 0.3 \n    0.25    0.125   0.625   0.0 \n    0.0 0.667   0.333   0.0 \n  - Initials (Size: 1 × 4):\n    0.087   0.435   0.348   0.13    \n  - order: 1","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"Note that, sometimes the dinucleotides transition do not harbor important biological meaning, whereas trinucleotides or codons are, in fact, the building block of proteins. Therefore, sometimes the transition model we want to build is usually a second-order Markov chain, that represents the possible transitions of a trinucleotide.","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"A very nice nice property of the transition probability matrix is that the n-step transition probability matrix ^n = (_ij(n)), that is the n th power of ℳ represents i → j transitions in n steps. We can also have higher order transition models as:","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"transition_model(sequence, 2)","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"TransitionModel:\n  - Transition Probability Matrix (Size: 4 × 4):\n    0.0 0.5 0.2 0.3 \n    0.05    0.475   0.325   0.15    \n    0.156   0.391   0.416   0.038   \n    0.083   0.375   0.342   0.2 \n  - Initials (Size: 1 × 4):\n    0.087   0.435   0.348   0.13    \n  - order: 2","category":"page"},{"location":"markovchains-variant/#The-*log-odds-ratio*-decision-rule","page":"A variant test","title":"The log-odds ratio decision rule","text":"","category":"section"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"The sequence probability given a transition probability model (eq. 2) could be used as the source of a sequence classification based on a decision rule to classify whether a sequence correspond to a model or another. Now, imagine we got two DNA sequence transition models, a CDS model and a No-CDS model. The log-odds ratio decision rule could be establish as:","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"beginalign\nS(X) = log fracP_C(X_1=i_1 ldots X_T=i_T)P_N(X_1=i_1 ldots X_T=i_T)  begincases  eta  Rightarrow textcoding   eta  Rightarrow textnoncoding endcases\nendalign","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"Where the P<sub>C</sub> is the probability of the sequence given a CDS model, P<sub>N</sub> is the probability of the sequence given a No-CDS model, the decision rule is finally based on whether the ratio is greater or lesser than a given threshold η of significance level.","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"In the GeneFinder we have implemented this rule and a couple of basic transition probability models of CDS and No-CDS of E. coli from Axelson-Fisk (2015) work. To check whether a random sequence could be coding based on these decision we use the predicate iscoding with the ECOLICDS and ECOLINOCDS models:","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"randseq = getcds(randdnaseq(99))[1] # this will retrieved a random coding ORF\n\niscoding(randseq, ECOLICDS, ECOLINOCDS)","category":"page"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"false","category":"page"},{"location":"markovchains-variant/#References","page":"A variant test","title":"References","text":"","category":"section"},{"location":"markovchains-variant/","page":"A variant test","title":"A variant test","text":"Axelson-Fisk, Marina. 2015. Comparative Gene Finding. Vol. 20. Computational Biology. London: Springer London. http://link.springer.com/10.1007/978-1-4471-6693-1.","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"engine: knitr cache: true –-","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"<p align=\"center\">   <img src=\"../assets/logo.svg\" height=\"150\"><br/>   <i>A Gene Finder framework for Julia.</i><br/><br/>   <a href=\"https://www.repostatus.org/#wip\">     <img src=\"https://www.repostatus.org/badges/latest/wip.svg\">   </a>   <a href=\"https://codecov.io/gh/camilogarciabotero/GeneFinder.jl\">     <img src=\"https://img.shields.io/codecov/c/github/camilogarciabotero/GeneFinder.jl?logo=codecov&logoColor=white\">   </a>   <a href=\"https://camilogarciabotero.github.io/GeneFinder.jl/dev/\">     <img src=\"https://img.shields.io/badge/documentation-online-blue.svg?logo=Julia&logoColor=white\">   </a>   <a href=\"https://travis-ci.com/camilogarciabotero/GeneFinder.jl\">     <img src=\"https://travis-ci.com/camilogarciabotero/GeneFinder.jl.svg?branch=main\">   <a href=\"https://github.com/camilogarciabotero/GeneFinder.jl/blob/main/LICENSE\">     <img src=\"https://img.shields.io/badge/license-MIT-green.svg\">   </a> </p>","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"","category":"page"},{"location":"oldindex/#Overview","page":"-","title":"Overview","text":"","category":"section"},{"location":"oldindex/","page":"-","title":"-","text":"This is a species-agnostic, algorithm extensible, sequence-anonymous (genome, metagenomes) gene finder library for the Julia Language.","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"The main goal is to create a versatile module that enables apply different implemented algorithm to DNA sequences. See, for instance, BioAlignment implementations of different sequence alignment algorithms (local, global, edit-distance).","category":"page"},{"location":"oldindex/#Installation","page":"-","title":"Installation","text":"","category":"section"},{"location":"oldindex/","page":"-","title":"-","text":"You can install GeneFinder from the julia REPL. Press ] to enter pkg mode, and enter the following:","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"add GeneFinder","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.","category":"page"},{"location":"oldindex/#Algorithms","page":"-","title":"Algorithms","text":"","category":"section"},{"location":"oldindex/#Coding-genes-(CDS-ORFs)","page":"-","title":"Coding genes (CDS - ORFs)","text":"","category":"section"},{"location":"oldindex/","page":"-","title":"-","text":"[x] Simple finder\n[ ] EasyGene\n[ ] GLIMMER\n[ ] Prodigal - Pyrodigal\n[ ] PHANOTATE\n[ ] k-mer based gene finders (?)\n[ ] Augustus (?)","category":"page"},{"location":"oldindex/#Non-coding-genes-(RNA)","page":"-","title":"Non-coding genes (RNA)","text":"","category":"section"},{"location":"oldindex/","page":"-","title":"-","text":"[ ] Infernal\n[ ] tRNAscan","category":"page"},{"location":"oldindex/#Other-features","page":"-","title":"Other features","text":"","category":"section"},{"location":"oldindex/","page":"-","title":"-","text":"[ ] parallelism SIMD ?\n[ ] memory management (?)\n[ ] specialized types\n[x] Gene\n[x] ORF\n[x] CDS\n[ ] EukaryoticGene (?)\n[ ] ProkaryoticGene (?)\n[ ] Codon\n[ ] Intron\n[ ] Exon\n[ ] GFF –> See other packages\n[ ] FASTX –> See I/O in other packages","category":"page"},{"location":"oldindex/#Compatibilities","page":"-","title":"Compatibilities","text":"","category":"section"},{"location":"oldindex/","page":"-","title":"-","text":"Must interact with or extend:","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"GenomicAnnotations.jl\nBioSequences.jl\nSequenceVariation.jl\nGenomicFeatures.jl\nFASTX.jl\nKmers.jl","category":"page"},{"location":"oldindex/#Contributing","page":"-","title":"Contributing","text":"","category":"section"},{"location":"oldindex/#Citing","page":"-","title":"Citing","text":"","category":"section"},{"location":"oldindex/","page":"-","title":"-","text":"See CITATION.bib for the relevant reference(s).","category":"page"},{"location":"oldindex/","page":"-","title":"-","text":"Logo: gene analysis by Vector Points from the Noun Project","category":"page"},{"location":"simplefinder/#Finding-ORFs-in-BioSequences","page":"Finding ORFs","title":"Finding ORFs in BioSequences","text":"","category":"section"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"The first implemented function is findorfs a very non-restrictive ORF finder function that will catch all ORFs in a dedicated structure. Note that this will catch random ORFs not necesarily genes since it has no ORFs size or overlapping condition contraints. Thus it might consider aa\"M*\" a posible encoding protein from the resulting ORFs.","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"using BioSequences, GeneFinder\n\n# > 180195.SAMN03785337.LFLS01000089 -> finds only 1 gene in Prodigal (from Pyrodigal tests)\nseq = dna\"AACCAGGGCAATATCAGTACCGCGGGCAATGCAACCCTGACTGCCGGCGGTAACCTGAACAGCACTGGCAATCTGACTGTGGGCGGTGTTACCAACGGCACTGCTACTACTGGCAACATCGCACTGACCGGTAACAATGCGCTGAGCGGTCCGGTCAATCTGAATGCGTCGAATGGCACGGTGACCTTGAACACGACCGGCAATACCACGCTCGGTAACGTGACGGCACAAGGCAATGTGACGACCAATGTGTCCAACGGCAGTCTGACGGTTACCGGCAATACGACAGGTGCCAACACCAACCTCAGTGCCAGCGGCAACCTGACCGTGGGTAACCAGGGCAATATCAGTACCGCAGGCAATGCAACCCTGACGGCCGGCGACAACCTGACGAGCACTGGCAATCTGACTGTGGGCGGCGTCACCAACGGCACGGCCACCACCGGCAACATCGCGCTGACCGGTAACAATGCACTGGCTGGTCCTGTCAATCTGAACGCGCCGAACGGCACCGTGACCCTGAACACAACCGGCAATACCACGCTGGGTAATGTCACCGCACAAGGCAATGTGACGACTAATGTGTCCAACGGCAGCCTGACAGTCGCTGGCAATACCACAGGTGCCAACACCAACCTGAGTGCCAGCGGCAATCTGACCGTGGGCAACCAGGGCAATATCAGTACCGCGGGCAATGCAACCCTGACTGCCGGCGGTAACCTGAGC\"","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"726nt DNA Sequence:\nAACCAGGGCAATATCAGTACCGCGGGCAATGCAACCCTG…GCGGGCAATGCAACCCTGACTGCCGGCGGTAACCTGAGC","category":"page"},{"location":"simplefinder/#Finding-all-ORFs","page":"Finding ORFs","title":"Finding all ORFs","text":"","category":"section"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"findorfs(seq)","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"12-element Vector{ORF}:\n ORF(29:40, '+')\n ORF(137:145, '+')\n ORF(164:184, '+')\n ORF(173:184, '+')\n ORF(236:241, '+')\n ORF(248:268, '+')\n ORF(362:373, '+')\n ORF(470:496, '+')\n ORF(551:574, '+')\n ORF(569:574, '+')\n ORF(581:601, '+')\n ORF(695:706, '+')","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"Two other functions (getcds and getproteins) pass the sequence to findorfs take the ORFs and act as generators of the sequence, so this way the can be collected in the REPL as an standard output or written into a file more conviniently using the FASTX IO system:","category":"page"},{"location":"simplefinder/#Generting-cds-and-proteins-with-its-ORF","page":"Finding ORFs","title":"Generting cds and proteins with its ORF","text":"","category":"section"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"getcds(seq)","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"12-element Vector{LongSequence{DNAAlphabet{4}}}:\n ATGCAACCCTGA\n ATGCGCTGA\n ATGCGTCGAATGGCACGGTGA\n ATGGCACGGTGA\n ATGTGA\n ATGTGTCCAACGGCAGTCTGA\n ATGCAACCCTGA\n ATGCACTGGCTGGTCCTGTCAATCTGA\n ATGTCACCGCACAAGGCAATGTGA\n ATGTGA\n ATGTGTCCAACGGCAGCCTGA\n ATGCAACCCTGA","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"getproteins(seq)","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"12-element Vector{LongAA}:\n MQP*\n MR*\n MRRMAR*\n MAR*\n M*\n MCPTAV*\n MQP*\n MHWLVLSI*\n MSPHKAM*\n M*\n MCPTAA*\n MQP*","category":"page"},{"location":"simplefinder/#Combining-FASTX-for-reading-and-writing-a-fasta-record","page":"Finding ORFs","title":"Combining FASTX for reading and writing a fasta record","text":"","category":"section"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"using FASTX\n\nwrite_proteins(\"../../test/data/NC_001884.fasta\", \"proteins.fasta\")","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"head proteins.fasta\n>location=75:113 strand=+\nMKLNLRIGVISN*\n>location=144:215 strand=+\nMLTITSFKTILNSSFFFSELDSM*\n>location=210:215 strand=+\nM*\n>location=237:374 strand=+\nMLFLTVLLSISDCVSCNPLSSFFAFWSSLNSSSNAAFLFKKSSSL*\n>location=337:402 strand=+\nMQLFSSKKVHHCKCHFHIYRR*","category":"page"},{"location":"simplefinder/#Writting-cds-and-proteins-fastas","page":"Finding ORFs","title":"Writting cds and proteins fastas","text":"","category":"section"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"write_cds(\"cds.fasta\", seq)","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"cat cds.fasta\n>location=29:40 strand=+\nATGCAACCCTGA\n>location=137:145 strand=+\nATGCGCTGA\n>location=164:184 strand=+\nATGCGTCGAATGGCACGGTGA\n>location=173:184 strand=+\nATGGCACGGTGA\n>location=236:241 strand=+\nATGTGA\n>location=248:268 strand=+\nATGTGTCCAACGGCAGTCTGA\n>location=362:373 strand=+\nATGCAACCCTGA\n>location=470:496 strand=+\nATGCACTGGCTGGTCCTGTCAATCTGA\n>location=551:574 strand=+\nATGTCACCGCACAAGGCAATGTGA\n>location=569:574 strand=+\nATGTGA\n>location=581:601 strand=+\nATGTGTCCAACGGCAGCCTGA\n>location=695:706 strand=+\nATGCAACCCTGA","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"write_proteins(\"proteins.fasta\", seq)","category":"page"},{"location":"simplefinder/","page":"Finding ORFs","title":"Finding ORFs","text":"cat proteins.fasta\n>location=29:40 strand=+\nMQP*\n>location=137:145 strand=+\nMR*\n>location=164:184 strand=+\nMRRMAR*\n>location=173:184 strand=+\nMAR*\n>location=236:241 strand=+\nM*\n>location=248:268 strand=+\nMCPTAV*\n>location=362:373 strand=+\nMQP*\n>location=470:496 strand=+\nMHWLVLSI*\n>location=551:574 strand=+\nMSPHKAM*\n>location=569:574 strand=+\nM*\n>location=581:601 strand=+\nMCPTAA*\n>location=695:706 strand=+\nMQP*","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a species-agnostic, algorithm extensible, sequence-anonymous (genome, metagenomes) gene finder library for the Julia Language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main goal is to create a versatile module that enables apply different implemented algorithm to DNA sequences. See, for instance, BioAlignment implementations of different sequence alignment algorithms (local, global, edit-distance).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install GeneFinder from the julia REPL. Press ] to enter pkg mode, and enter the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add GeneFinder","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.","category":"page"},{"location":"#Algorithms","page":"Home","title":"Algorithms","text":"","category":"section"},{"location":"#Coding-genes-(CDS-ORFs)","page":"Home","title":"Coding genes (CDS - ORFs)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"☒ Simple finder\n☐ EasyGene\n☐ GLIMMER\n☐ Prodigal - Pyrodigal\n☐ PHANOTATE\n☐ k-mer based gene finders (?)\n☐ Augustus (?)","category":"page"},{"location":"#Non-coding-genes-(RNA)","page":"Home","title":"Non-coding genes (RNA)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"☐ Infernal\n☐ tRNAscan","category":"page"},{"location":"#Other-features","page":"Home","title":"Other features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"☐ parallelism SIMD ?\n☐ memory management (?)\n☐ incorporate Ribosime Binding Sites (RBS)\n☐ incorporate Programmed Reading Frame Shifting (PRFS)\n☐ specialized types\n☒ Gene\n☒ ORF\n☒ Codon\n☒ CDS\n☐ EukaryoticGene (?)\n☐ ProkaryoticGene (?)\n☐ Intron\n☐ Exon\n☐ GFF –\\> See other packages\n☐ FASTX –\\> See I/O in other packages","category":"page"},{"location":"#Compatibilities","page":"Home","title":"Compatibilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Must interact with or extend:","category":"page"},{"location":"","page":"Home","title":"Home","text":"GenomicAnnotations.jl\nBioSequences.jl\nSequenceVariation.jl\nGenomicFeatures.jl\nFASTX.jl\nKmers.jl\nGraphs.jl","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See CITATION.bib for the relevant reference(s).","category":"page"},{"location":"markovchains/#DNA-as-a-Markov-chain","page":"Towards Markov Chains","title":"DNA as a Markov chain","text":"","category":"section"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"Several packages (e.g. MarkovChainsHammer.jl, DiscreteMarkovChains.jl, etc.) in the Julia ecosystem have been implemented to work with Markov chains with a state space of integers, those could be efficient in many ways, but they are clumsy to work with a specialized biological types as in the BioJulia ecosystem. Therefore, in the GeneFinder package we dedicated some implementations to work with BioSequence types so that we can expand the functionality in an efficient way (see complete API).","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"One important step towards many gene finding algorithms is to represent a DNA sequence as a Markov chain. In this representation a DNA sequence of a reduced alphabet 𝒜 = A  C  G   T is draw as a four-vertex graph, where each letter of 𝒜 is a state (vertex) and the edges of the graph represent transitions from one nucleotide to another in a sequence (e.g. A rightarrow T represent a single nucleotide to nucleotide transition). This is also considered more specifically as a Discrete Markov chain (Axelson-Fisk 2015). The complete set of transitions and states of a DNA sequence of alphabet 𝒜.","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"(Image: DNA sequence as a Markov chain)","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"More formally a Markov chain is a random process where each state is a random variable X_t where t in T is a discrete time in a finite sequence T and the probability to jump from one state into another is only dependent of the current state. Therefore a definition of this Markov property is given by:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"beginalign\nP(X_t = j X_t1 = i)\nendalign","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"where i, j ∈ 𝒜 . This property led us to generalize a way to calculate the probability of a sequence T from a process (X_{1}...X_{T}) where each random variable is a nucleotide from 𝒜 so that:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"beginalign\nP(X_1 = i_1X_T = i_T) = P(X_1 = i_1) prod_t=2^T P(X_t = i_t  X_t1 = i_t1)\nendalign","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"Note that previous equations has two terms, a initial probability P(X_1 = i_1) and the the product of all transitions beginning at t = 2. So, to calculate the initial probability distribution of each of the nucleotides of a string T with the alphabet 𝒜 we can first calculate the transition probability matrix widehatmathscrM out of the frequency count of the transitions. In an alphabet 𝒜 we got 4^2 transitions of one order, that is the AA AC AG  which coincides with the frequency of the dinucleotides in the sequence. So we can later in fact build a 4 x 4 matrix representing all the transitions. For instance in a DNA sequence T of 24 nucleotides:  ","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"CCTCCCGGACCCTGGGCTCGGGAC","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"We can calculate each frequency nucleotide to any other nucleotide widehatm_ij = fracc_ijc_i where c_ij is the actual count of the dinucleotide, and therefore c_i is the counts of the nucleotide i to any other nucleotide and build the transition probability matrix:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"beginbmatrix\n    textA  textC  textG  textT \ntextA  000  100  000  000 \ntextC  000  056  022  030 \ntextG  025  012  062  000 \ntextT  000  067  033  000 \nendbmatrix","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"It is noteworthy that initial probabilities can also be obtained from the counts of each nucleotide transitions c_ij over the total sum of the dinucleotide counts c_k:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"beginalign\nwidehatpi_i = fracc_isum_kc_k\nendalign","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"That way for the previous example example we can can calculate the initial probabilities widehatpi = (008043034013). Both set of probabilities composed a transition model that can be used to predict the probability of any DNA sequence using equation (2).","category":"page"},{"location":"markovchains/#Transition-models-with-BioSequences","page":"Towards Markov Chains","title":"Transition models with BioSequences","text":"","category":"section"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"We can now calculate a transition probability matrix from a LongDNA sequence using the transition_probability_matrix and initial_distribution methods for a given LongDNA sequence:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"using BioSequences, GeneFinder\n\nsequence = dna\"CCTCCCGGACCCTGGGCTCGGGAC\"\n\ntpm = transition_probability_matrix(sequence)\ninitials = initial_distribution(sequence)\n\nprintln(tpm)\nprintln(initials)","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"TPM{Dict{DNA, Int64}, Matrix{Float64}:\n   A     C     G     T     \nA  0.0   1.0   0.0   0.0   \nC  0.0   0.5   0.2   0.3   \nG  0.25  0.125 0.625 0.0   \nT  0.0   0.667 0.333 0.0   \n\n[0.08695652173913043 0.43478260869565216 0.34782608695652173 0.13043478260869565]","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"More conveniently, we can now use the transition_model method and obtain the transition probabilities and the initial distribution and build a transition model:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"transition_model(sequence)","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"TransitionModel:\n  - Transition Probability Matrix (Size: 4 × 4):\n    0.0 1.0 0.0 0.0 \n    0.0 0.5 0.2 0.3 \n    0.25    0.125   0.625   0.0 \n    0.0 0.667   0.333   0.0 \n  - Initials (Size: 1 × 4):\n    0.087   0.435   0.348   0.13    \n  - order: 1","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"Note that, sometimes the dinucleotides transition do not harbor important biological meaning, whereas trinucleotides or codons are, in fact, the building block of proteins. Therefore, sometimes the transition model we want to build is usually a second-order Markov chain, that represents the possible transitions of a trinucleotide.","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"A very nice nice property of the transition probability matrix is that the n-step transition probability matrix mathscrM^n = (mathscrm_ij(n)), that is the nth power of mathscrM represents i rightarrow j transitions in n steps. We can also have higher order transition models as:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"transition_model(sequence, 2)","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"TransitionModel:\n  - Transition Probability Matrix (Size: 4 × 4):\n    0.0 0.5 0.2 0.3 \n    0.05    0.475   0.325   0.15    \n    0.156   0.391   0.416   0.038   \n    0.083   0.375   0.342   0.2 \n  - Initials (Size: 1 × 4):\n    0.087   0.435   0.348   0.13    \n  - order: 2","category":"page"},{"location":"markovchains/#The-*log-odds-ratio*-decision-rule","page":"Towards Markov Chains","title":"The log-odds ratio decision rule","text":"","category":"section"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"The sequence probability given a transition probability model (eq. 2) could be used as the source of a sequence classification based on a decision rule to classify whether a sequence correspond to a model or another. Now, imagine we got two DNA sequence transition models, a CDS model and a No-CDS model. The log-odds ratio decision rule could be establish as:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"beginalign\nS(X) = log fracP_C(X_1=i_1 ldots X_T=i_T)P_N(X_1=i_1 ldots X_T=i_T)  begincases  eta  Rightarrow textcoding   eta  Rightarrow textnoncoding endcases\nendalign","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"Where the P_C is the probability of the sequence given a CDS model, P_N is the probability of the sequence given a No-CDS model, the decision rule is finally based on whether the ratio is greater or lesser than a given threshold η of significance level.","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"In the GeneFinder we have implemented this rule and a couple of basic transition probability models of CDS and No-CDS of E. coli from Axelson-Fisk (2015) work. To check whether a random sequence could be coding based on these decision we use the predicate iscoding with the ECOLICDS and ECOLINOCDS models:","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"randseq = getcds(randdnaseq(99))[1] # this will retrieved a random coding ORF\n\niscoding(randseq, ECOLICDS, ECOLINOCDS)","category":"page"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"true","category":"page"},{"location":"markovchains/#References","page":"Towards Markov Chains","title":"References","text":"","category":"section"},{"location":"markovchains/","page":"Towards Markov Chains","title":"Towards Markov Chains","text":"Axelson-Fisk, Marina. 2015. Comparative Gene Finding. Vol. 20. Computational Biology. London: Springer London. http://link.springer.com/10.1007/978-1-4471-6693-1.","category":"page"}]
}
